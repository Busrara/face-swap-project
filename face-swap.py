# -*- coding: utf-8 -*-
"""Welcome To Colab

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

import os
import cv2
import numpy as np
import matplotlib.pyplot as plt
from insightface.app import FaceAnalysis
from insightface.model_zoo import get_model
from huggingface_hub import hf_hub_download
import albumentations as A

class AugmentedSourceSwapper:
    def __init__(self, ctx_id=0, det_size=(640, 640)):
        self.app = FaceAnalysis(name='buffalo_l')
        self.app.prepare(ctx_id=ctx_id, det_size=det_size)

        model_path = hf_hub_download(
            repo_id="Aitrepreneur/insightface",
            filename="inswapper_128.onnx"
        )
        self.swapper = get_model(model_path, download=False)

        # Augmentation pipeline
        self.augmentation = A.Compose([
            A.RandomBrightnessContrast(p=0.4),
            A.HueSaturationValue(p=0.4),
            A.GaussNoise(p=0.3),
            A.MotionBlur(p=0.2),
        ])

    def apply_augmentation(self, image):
        aug = self.augmentation(image=image)
        return aug['image']

    def smart_face_swap(self, source_img, target_img, quality_filter=True):
        source_faces = self.app.get(source_img)
        target_faces = self.app.get(target_img)
        if not source_faces or not target_faces:
            print("Face not detected on source or target")
            return target_img

        if quality_filter:
            source_qualities = [f['det_score'] for f in source_faces]
            target_qualities = [f['det_score'] for f in target_faces]
            best_source = source_faces[np.argmax(source_qualities)]
            best_targets = [f for i, f in enumerate(target_faces) if target_qualities[i] > 0.3]
        else:
            best_source = source_faces[0]
            best_targets = target_faces

        result = target_img.copy()
        for tgt_face in best_targets:
            result = self.swapper.get(result, tgt_face, best_source, paste_back=True)
        return result

    def show_comparison(self, target_img, augmented_source, swapped_img):
        plt.figure(figsize=(15,5))

        plt.subplot(1, 3, 1)
        plt.imshow(cv2.cvtColor(target_img, cv2.COLOR_BGR2RGB))
        plt.title("Target Image")
        plt.axis("off")

        plt.subplot(1, 3, 2)
        plt.imshow(cv2.cvtColor(augmented_source, cv2.COLOR_BGR2RGB))
        plt.title("Augmented Source")
        plt.axis("off")

        plt.subplot(1, 3, 3)
        plt.imshow(cv2.cvtColor(swapped_img, cv2.COLOR_BGR2RGB))
        plt.title("Swapped Result")
        plt.axis("off")

        plt.tight_layout()
        plt.show()

def main():
    # Add your own paths from Colab
    source_path = ""
    target_path = ""

    source_img = cv2.imread(source_path)
    target_img = cv2.imread(target_path)

    if source_img is None or target_img is None:
        print("Image loading error.")
        return

    swapper = AugmentedSourceSwapper()

    # Augmentation on source image
    augmented_source = swapper.apply_augmentation(source_img)

    # Swap from augmented source to target
    swapped_img = swapper.smart_face_swap(augmented_source, target_img)

    # Show results
    swapper.show_comparison(target_img, augmented_source, swapped_img)

    # Save output
    cv2.imwrite("swapped_output.jpg", swapped_img)
    print("Swapped image saved as swapped_output.jpg")

if __name__ == "__main__":
    main()