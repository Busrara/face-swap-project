# -*- coding: utf-8 -*-
"""Welcome To Colab

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

import os
import cv2
import numpy as np
import matplotlib.pyplot as plt
from insightface.app import FaceAnalysis
from insightface.model_zoo import get_model
from huggingface_hub import hf_hub_download

class EnhancedFaceSwapper:
    def __init__(self, ctx_id=0, det_size=(640, 640)):
        self.app = FaceAnalysis(name='buffalo_l')
        self.app.prepare(ctx_id=ctx_id, det_size=det_size)

        model_path = hf_hub_download(
            repo_id="Aitrepreneur/insightface",
            filename="inswapper_128.onnx"
        )
        self.swapper = get_model(model_path, download=False)

    def smart_face_swap(self, source_img, target_img, quality_filter=True):
        source_faces = self.app.get(source_img)
        target_faces = self.app.get(target_img)
        if not source_faces or not target_faces:
            print("Face not detected on source or target")
            return target_img

        if quality_filter:
            source_qualities = [f['det_score'] for f in source_faces]
            target_qualities = [f['det_score'] for f in target_faces]
            best_source = source_faces[np.argmax(source_qualities)]
            best_targets = [f for i, f in enumerate(target_faces) if target_qualities[i] > 0.3]
        else:
            best_source = source_faces[0]
            best_targets = target_faces

        result = target_img.copy()

        for tgt_face in best_targets:
            # paste_back
            swapped = self.swapper.get(result, tgt_face, best_source, paste_back=True)

            # Mask
            mask = np.zeros(target_img.shape[:2], dtype=np.uint8)
            bbox = tgt_face['bbox'].astype(int)
            x1, y1, x2, y2 = bbox
            mask[y1:y2, x1:x2] = 255
            mask = cv2.GaussianBlur(mask, (15, 15), 0)

            center = ((x1 + x2) // 2, (y1 + y2) // 2)

            # SeamlessClone for natural swapping
            result = cv2.seamlessClone(swapped, result, mask, center, cv2.NORMAL_CLONE)

        return result

    def visualize_results(self, original, swapped, title="Face Swap Result"):
        plt.figure(figsize=(10,5))
        plt.subplot(1,2,1)
        plt.imshow(cv2.cvtColor(original, cv2.COLOR_BGR2RGB))
        plt.title("Original")
        plt.axis('off')
        plt.subplot(1,2,2)
        plt.imshow(cv2.cvtColor(swapped, cv2.COLOR_BGR2RGB))
        plt.title(title)
        plt.axis('off')
        plt.show()

def main():
    swapper = EnhancedFaceSwapper()

    source_img_path = '' # Add your path
    target_img_path = '' # Add your path

    source_img = cv2.imread(source_img_path)
    target_img = cv2.imread(target_img_path)

    if source_img is None or target_img is None:
        print("Error loading images. Check paths.")
        return

    swapped_img = swapper.smart_face_swap(source_img, target_img)

    swapper.visualize_results(target_img, swapped_img, title="Swapped Face")

    cv2.imwrite('swapped_output.jpg', swapped_img)
    print("Saved swapped image as swapped_output.jpg")

if __name__ == "__main__":
    main()